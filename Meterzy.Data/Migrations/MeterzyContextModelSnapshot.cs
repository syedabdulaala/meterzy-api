// <auto-generated />
using System;
using Meterzy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Meterzy.Data.Migrations
{
    [DbContext(typeof(MeterzyContext))]
    partial class MeterzyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Meterzy.Entity.Data.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("EmailHash")
                        .IsRequired();

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("Meterzy.Entity.Data.FixedTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Charges");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TariffId");

                    b.Property<int>("UnitType");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.ToTable("FixedTariff");
                });

            modelBuilder.Entity("Meterzy.Entity.Data.Meter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNo")
                        .IsRequired();

                    b.Property<int>("AppUserId");

                    b.Property<string>("ConsumerNo")
                        .IsRequired();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TariffId");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("TariffId");

                    b.ToTable("Meter");
                });

            modelBuilder.Entity("Meterzy.Entity.Data.MeterReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<int>("MeterId");

                    b.Property<DateTime>("NotedOn");

                    b.Property<int>("Reading");

                    b.HasKey("Id");

                    b.HasIndex("MeterId");

                    b.ToTable("MeterReading");
                });

            modelBuilder.Entity("Meterzy.Entity.Data.RangedTariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Charges");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<int>("LowerRange");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TariffId");

                    b.Property<int>("UnitType");

                    b.Property<int>("UpperRange");

                    b.HasKey("Id");

                    b.HasIndex("TariffId");

                    b.ToTable("RangedTariff");
                });

            modelBuilder.Entity("Meterzy.Entity.Data.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("LastModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Tariff");
                });

            modelBuilder.Entity("Meterzy.Entity.Data.FixedTariff", b =>
                {
                    b.HasOne("Meterzy.Entity.Data.Tariff", "Tariff")
                        .WithMany("FixedTariffs")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Meterzy.Entity.Data.Meter", b =>
                {
                    b.HasOne("Meterzy.Entity.Data.AppUser", "AppUser")
                        .WithMany("Meters")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Meterzy.Entity.Data.Tariff", "Tariff")
                        .WithMany("Meters")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Meterzy.Entity.Data.MeterReading", b =>
                {
                    b.HasOne("Meterzy.Entity.Data.Meter", "Meter")
                        .WithMany("Readings")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Meterzy.Entity.Data.RangedTariff", b =>
                {
                    b.HasOne("Meterzy.Entity.Data.Tariff", "Tariff")
                        .WithMany("RangedTariffs")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Meterzy.Entity.Data.Tariff", b =>
                {
                    b.HasOne("Meterzy.Entity.Data.AppUser", "AppUser")
                        .WithMany("Tariffs")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
